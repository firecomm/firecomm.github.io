(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"0uz4":function(e,n,r){"use strict";r.r(n);var t=r("q1tI"),a=r.n(t),s=r("HVSj");n.default=function(e){return a.a.createElement(s.a,{subsection:"Server ClientStream Call",content:"# Server Client-Stream Response\n\n```javascript\n// /server/handlers.js\nfunction someServerClientStreamHandler(response) {\n  response\n    .on('data', (data) => console.log(data))\n    .on('metadata', (metadata) => metadata.getMap())\n    .on('error', (err) => console.error(err))\n\n  // stream ending response\n  response\n    .send({message: 'property', key: 'proto-defined'})\n}\n```\n\nObject for sending **one** stream-ending RPC Method **response** and listening for **any number** of RPC Method **requests**.\n\n| Passed into as `call`      | Type   | Peer        | Description                                                                                                                            |\n| ---------------------------- | -------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| `<RPCmethodHandler(call)>` | Object | Stub Duplex | `<RPCmethodName>` defined with `stream` on request and without `stream` on response in `proto`. Peer is defined by methodName at Server |\n\n## Properties\n### `.head` \nMetadata `Object` received from stub.\n\n## Methods\n### `.on(event, callback)`\nListener for `'data'`, `'metadata'`, `'error'` event from peer.\n\nparameters:\n\n| Name     | Type/Options | Description                                                            |\n| ---------- | -------------- | ------------------------------------------------------------------------ |\n| event    | String       | Event to listen for from peer.                                         |\n|          | 'data'       | Listens for peer response. Callback gets passed `Message`.              |\n|          | 'metadata'   | Listens for peer metadata. Callback gets passed `Metadata`.              |\n|          | 'error'      | Listens for peer error. Callback gets passed `Error`.              |\n| callback | Function     | Is passed `Message` based on event.     |\nreturns `Server Client-Stream Response`\n\n### `.set(metadata)`\n\nEmits a `'data'` event and sends `message` to peer.\n\nparameters:\n\n| Name          | Type     | Description                                                                                     |\n| --------------- | ---------- | ------------------------------------------------------------------------------------------------- |\n| metadata       | Object   | Metadata to be sent to peer. Keys are normalized to lowercase ASCII. |\nreturns `Server Client-Stream Response`\n\n### `.send(message)`\n\nEmits a `'data'` event and sends `message` to peer.\n\nparameters:\n\n| Name          | Type     | Description                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------|\n| message       | Object   | Properties should match the request `message` defined in the `proto`                            |\nreturns `Server Client-Stream Response`\n\n### `.catch(callback)`\nListener for `'error'` event from peer.\n\nparameters:\n\n| Name     | Type     | Parameter | Description                                   |\n|----------|----------|-----------|-----------------------------------------------|\n| callback(error) | Function | error     | Peer's thrown `error` is passed into callback |\nreturns `Server Client-Stream Response`\n\n\n### `.throw(error, trailers)`\nNon-chainable method that cancels ongoing connection. Results in the call ending with a CANCELLED status, unless it has already ended with some other status.\n\nparameters:\n\n| Name          | Type     | Description                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------|\n| error       | Error   | Error to be sent to Peer                            |\n| trailers       | Object   | Metadata to be sent to peer with error                            |\n\nreturns `undefined`\n\n### `.getPeer()`\nNon-chainable method that returns peer's URI.\n\nreturns `string` URI of peer"})}},ZxpT:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/apireference/serverclientstreamcall",function(){var e=r("0uz4");return{page:e.default||e}}])}},[["ZxpT",1,0]]]);