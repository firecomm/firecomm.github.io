(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{FMTH:function(e,t,o){"use strict";o.r(t);var r=o("q1tI"),n=o.n(r),i=o("HVSj");t.default=function(e){return n.a.createElement(i.a,{subsection:"Concepts",content:"# Concepts\n\nFor those familiar with gRPC and looking to dive into code, it may make more sense to skip straght to the [Intro](firecomm.github.io/docs/gettingstarted/intro).\nThis section seeks to provide a brief overview of the core concepts of Firecomm, which mirror the core concepts of gRPC.\n\n> Firecomm is a framework for gRPC which allows Node.js developers to quickly spin up powerful gRPC microservice communication architectures with a simplified API.\n\nFirecomm was designed by a team of Node.js engineers who designed an interal wrapper for Google's gRPC-node library in their microservice architecture journey. Along the way, they created a more consistent and DRY syntax, with support for features like SSL, health-check, and   decided to open-source the project.\n\nThe project is continually maintained, so for those looking to contribute, please do not hesitate to [message the Firecomm team](mailto://firecommgrpc@gmail.com), or make an Issue/PR on our [Github repository](https://github.com/firecomm/firecomm).\n\n\nAs in ordinary RESTful communication, there are computers who make the request (Clients, called \"Stubs\" in gRPC) and computers who handle the requests (Servers)\n\nThe basic framework operates around gRPC's `Servers` and `Stubs`. Everything found in the library assists developers with either `Servers` or `Stubs`. \n\nSuch as:\n- creating the logical skeleton for Server and Stub setup (build)\n- configuring Servers and Stubs (Server constructor and Stub constructor)\n- adding handlers, middleware, and logic to Servers (Server.addService())\n- facilitating communication between Servers and Stubs (Stub methods and Calls)"})}},IksE:function(e,t,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/gettingstarted/concepts",function(){var e=o("FMTH");return{page:e.default||e}}])}},[["IksE",1,0]]]);