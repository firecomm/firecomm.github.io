(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{"25FM":function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),s=t.n(a),r=t("HVSj");n.default=function(e){return s.a.createElement(r.a,{subsection:"Stub DuplexCall",content:"# Stub Duplex\n\n```javascript\n// /clients/someClient.js\nconst { Stub } = require( 'firecomm' );\nconst package = require( '../package.js' )\nconst stub = new Stub( \n  package.SomeService, \n  'localhost: 3000',\n);\n\nconst duplex = stub.someDuplex({thisIsMetadata: 'example'})\n  .send({infinite: 'requests'})\n  .on( 'metadata', (metadata) => {\n    console.log(metadata.getMap())\n  })\n  .on( 'error', (err) => console.error(err))\n  .on( 'data', (data) => {\n    duplex.send(\n      {\n        infinite: data\n      }\n    )\n  })\n  \n  setInterval(() => {\n    duplex.send(\n      {\n        infinite: 'requests'\n      }\n    )\n  }, 100);\n```\n\nObject for sending **any number** of RPC Method **requests** and listening for **any number** of RPC Method **responses**.\n\n| Returned from          | Type   | Peer         | Description                                                                |\n| ------------------------ | -------- | -------------- | ---------------------------------------------------------------------------- |\n| `Stub.<RPCmethodName>()` | Object | Server Duplex | `<RPCmethodName>` defined with `stream` on both request and response in `proto`. Peer is defined by methodName at Server | \n\n## Methods\n\n### `.on(event, callback)`\nListener for `'data'`, `error`, `'metadata'`, or `'status'` event from peer.\n\nparameters:\n\n| Name     | Type/Options | Description                                                            |\n| ---------- | -------------- | ------------------------------------------------------------------------ |\n| event    | String       | Event to listen for from peer.                                         |\n|          | 'data'       | Listens for peer response. Callback gets passed `Message`.              |\n|          | 'error'      | Listens for peer thrown error. Callback gets passed `Error`.            |\n|          | 'metadata'   | Listens for Metadata object from peer. Callback gets passed `Metadata`. |\n|          | 'status'     | Listens for change in connection status. Callback gets passed `Status`. |\n| callback | Function     | Is passed `Message`, `Error`, `Metadata`, `Status` based on event.     |\nreturns `Stub Duplex` to chain Methods\n\n### `.send(message, flags, flushCallback)`\n\nEmits a `'data'` event and sends `message` to peer.\n\nalias:\n> `.write(message, flags, flushCallback)`\n\nparameters:\n\n| Name          | Type     | Description                                                                                     |\n| --------------- | ---------- | ------------------------------------------------------------------------------------------------- |\n| message       | Object   | Properties should match the request `message` defined in the `proto`                            |\n| flags         | Number   | *Optional* Integer matching `propagation flag` Enumerable to modify how the message is written. |\n| flushCallback | Function | *Optional* Callback for when this chunk of data is flushed                                      |\nreturns `Stub Duplex` to chain Methods\n\n### `.catch(callback)`\nListener for `'error'` event from peer.\n\nalias:\n> `.on('error', callback)`\n\nparameters:\n\n| Name     | Type     | Parameter | Description                                   |\n| ---------- | ---------- | ----------- | ----------------------------------------------- |\n| callback(error) | Function | error     | Peer's thrown `error` is passed into callback |\nreturns `Stub Duplex` to chain Methods\n\n### `.cancel()`\nNon-chainable method that cancels ongoing connection. Results in the call ending with a CANCELLED status, unless it has already ended with some other status.\n\nalias:\n\n> `.throw()`\n\n\nreturns `undefined`\n\n### `.getPeer()`\nNon-chainable method that returns peer's URI.\n\nreturns `string` URI of peer"})}},N6TU:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/apireference/stubduplexcall",function(){var e=t("25FM");return{page:e.default||e}}])}},[["N6TU",1,0]]]);