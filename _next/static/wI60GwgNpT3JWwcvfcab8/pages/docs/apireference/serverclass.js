(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{qPHK:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/apireference/serverclass",function(){var e=n("sCQb");return{page:e.default||e}}])},sCQb:function(e,r,n){"use strict";n.r(r);var s=n("q1tI"),a=n.n(s),t=n("HVSj");r.default=function(e){return a.a.createElement(t.a,{subsection:"Server",content:"# firecomm.Server\n\n```javascript\n// /server/server.js\nconst { Server } = require( 'firecomm' );\nconst package = require( '../package.js' );\nconst { someHandler, anotherHandler } = require ( './handlers.js' );\n\nnew Server()\n  .addService( \n    package.Service,   \n    { BidiMath: someHandler }\n  )\n  .addService( \n    package.AnotherService,   \n    { BidiMath: anotherHandler }\n  )\n  .bind(['0.0.0.0: 3000', '0.0.0.0: 8888'])\n  .start();\n```\n\n## Constructor\n```javascript\nnew firecomm.Server([options])\n```\n\n| Name    | Type   | Description                                                                                                             |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------- |\n| options | Object | Options that should be passed to the internal server implementation. The available options are listed in Google's grpc-core documentation. |\nreturns `Server`\n## Methods\n\n### .addService(serviceName)\n\nparameters:\n\n| Name              | Type/Properties     | Values          | Description                                                                                                                                                                     |\n| ------------------- | --------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| serviceName       | package.ServiceName |                 | The serviceName you're adding will exist as a property on the `package` returned from `firecomm.build()`                                                                        |\n| implementation    | Object              |                 | RPC methodNames as properties and handlers/middleware stacks as values.                                                                                                         |\n|                   | RPCmethodName       | handlerFunction | Function to be passed `Server Unary`, `Server Client-Stream Response`, `Server Stream`, or `Server Duplex` based on RPC method definition in `proto`.                           |\n|                   |                     | middlewareArray | Array of functions from index 0 up to be passed `Server Unary`, `Server Client-Stream Response`, `Server Stream`, or `Server Duplex` based on RPC method definition in `proto`. |\n| serviceMiddleware | Array               |                 | Array of functions from index 0 up to be passed `Server Unary`, `Server Client-Stream Response`, `Server Stream`, or `Server Duplex` based on RPC method definition in `proto`. |\n| errorCallback     | Function            |                 |                                                                                                                                                                                 |\nreturns `Server` for chaining methods\n\n### .bind(addresses, sslConfigs)\n\nMethod for binding any number of socket addresses and ssl configurations.\n\nparameters:\n\n| Name              | Type/Properties     | Values          | Description                                                                                                                                                                     |\n| ------------------- | --------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| address(es)       | string or Array |                 | String or Array of Strings of addresses in format '0.0.0.0:3000'                                                                       |\n| sslConfig(s)    | Object or Array             |                 | Object or Array of Objects with properties ssl `privateKey` and ssl `certificate`.                                                                                                         |\n\nreturns `Server` for chaining methods\n\n### .start()\n\nMethod to start server. Must be invoked last.\n\nreturns `undefined`\n\n"})}}},[["qPHK",1,0]]]);