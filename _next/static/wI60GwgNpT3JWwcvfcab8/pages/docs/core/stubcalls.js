(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"9F3F":function(n,e,t){"use strict";t.r(e);var a=t("q1tI"),s=t.n(a),o=t("HVSj");e.default=function(n){return s.a.createElement(o.a,{subsection:"Stub Calls",content:'# Stub Calls\n\nStub calls are generated when you invoke a gRPC method on a Stub instance. They have slightly different syntax.\n\n> NOTE: To send messages with vanilla gRPC stub methods, you would pass the message, interceptors, and metadata into the main function. For separation of concerns, you now pass messages through the .send() method.\n\n```javascript\nconst { Stub } = require("firecomm");\n\nconst stubInstance = new Stub("localhost:3000");\n\n// create a call by invoking the method\nconst call = stubInstance.duplexStreamingMethod();\n// send data\ncall.send({message: "second message" });\n// add a listener for the response\ncall.on(\'data\', data => console.log(data));\n```\n\n## Chaining\n\nThe following is functionally the same as the above.\n\n```javascript\nconst { Stub } = require("firecomm");\n\nconst stubInstance = new Stub("localhost:3000");\n\n// create a call by invoking the method and chain the sending and adding listeners to the response\nstubInstance.duplexStreamingMethod()\n.send({message: "second message" })\n.on(\'data\', data => console.log(data));\n```'})}},FIsk:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/core/stubcalls",function(){var n=t("9F3F");return{page:n.default||n}}])}},[["FIsk",1,0]]]);